1. Нужен SSH от Хостинга/Сервера: IP, Логин, Пароль
2. Зайти в корень сервера www, где лежат все директории Битрикс24.
______________________________________________________________________________________
          P.S Клонирование и предварительная загрузка опциональны...
3. Создать временную папку в корне и клонировать туда удаленный репозиторий с GitLab
    mkdir temp_git_clone
    cd temp_git_clone
______________________________________________________________________________________
4. При помощи Git на Хостинге/Сервере нужно скачать все файлы из временной папки temp_git_clone:
    git clone https://gitlab.com/ваш_логин/ваш_репозиторий.git
Для проверки есть ли Git на Сервере пишем: `git --version` Должна отобразиться версия Git.
Если Git на Сервере не установлен: sudo apt-get update && sudo apt-get install git -y
Установка для CentOS/AlmaLinux: sudo yum install git -y
Если нет прав на sudo: wget https://github.com/git/git/archive/refs/tags/v2.40.1.tar.gz -O git.tar.gz
               tar -xf git.tar.gz
               cd git-2.40.1
               make prefix=$HOME/.local install
5. Переходим в директорию клонированного на сервер репозитория.
6. Копируем все файлы в /local: cp -r * /www/bxtestdom1.ru/local/
7. Удаляем временную папку: cd ..
                rm -rf temp_git_clone
8. В репозитории GitLab нужно создать: .gitlab-ci.yml
    В GitLab зайдите в свой репозиторий → "Set up CI/CD" → "Configure pipeline"
    Или создайте файл вручную в корне репозитория
    ________________________________________________________________________________
    ВАЖНО: Соблюдайте отступы в YAML (2 пробела на уровень)!
    ________________________________________________________________________________

            Код:
stages:
  - deploy

deploy_to_production:
  stage: deploy
  image: alpine
  before_script:
    - apk add --no-cache lftp
  script:
    - lftp -e "
      set ftp:ssl-allow no;
      open ftp://$FTP_USER:$FTP_PASSWORD@$FTP_SERVER;
      mirror -R ./ /www/bxtestdom1.ru/local/ --exclude .git/ --exclude .gitlab-ci.yml;
      quit"
  only:
    - main

Так же вместо логина, пароля, айпи можно подставлять переменные по типу "password: $FTP_PASSWORD". Что бы её создать надо зайти в:
    Свой репозиторий → Settings → CI/CD → Variables
Там мы создаем переменную. Название переменной должно совпадать с указанным в коде.
Посмотреть логи можно:
    Свой репозиторий → CI/CD → Pipelines
______________________________________________________________________________________________________________________________________________________________
        Что такое .gitlab-ci.yml и как его заполнять?

stages:                   # Определение этапов пайплайна
  - deploy                # Этап деплоя

deploy_to_production:     # Название задачи
  stage: deploy           # Принадлежность к этапу
  image: alpine           # Используемый Docker-образ
  before_script:          # Подготовка окружения
    - apk add --no-cache lftp
  script:                 # Основные команды
    - lftp -e "..."       # FTP-команды
  only:                   # Ограничения
    - main                # Только для ветки main

                Триггеры:
1. По умолчанию запускается при push в указанные ветки (в примере - main)
2. Ручной запуск: CI/CD → Pipelines → "Run pipeline"
3. По расписанию (добавить в конфиг):
    schedules:
      - cron: '0 0 * * *'  # Ежедневно в 00:00
        branches:
          - main
4. Для merge requests (добавить в конфиг):
    merge_requests:
      when: always

______________________________________________________________________________________
Дополнительные настройки:
1. Кэширование:
    cache:
      paths:
        - node_modules/
2. Артефакты:
    artifacts:
      paths:
        - local/
3. Параллельное выполнение:
    parallel: 2
4. Окружения:
    environment:
      name: production
5. Уведомления:
    notifications:
      email:
        recipients:
          - your@email.com
Ключевые особенности GitLab CI/CD:

Используется файл .gitlab-ci.yml

Переменные хранятся в Settings → CI/CD → Variables

Поддержка Docker-образов через image:
Гибкая система этапов (stages)
Встроенные артефакты и кэширование

Для работы необходимо:
Активировать Runner на сервере (или использовать shared runners)
Убедиться что на сервере открыт порт 21 (FTP)
Проверить права на запись в /www/bxtestdom1.ru/local/

Советы:
Для отладки используйте script: с командами вроде ls -la
Для сложных сценариев можно разбить на несколько stages
Для защиты переменных отмечайте их как "Protected"